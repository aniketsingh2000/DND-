[{"/var/www/html/multi-dnd/src/index.js":"1","/var/www/html/multi-dnd/src/initial-data.js":"2","/var/www/html/multi-dnd/src/column.jsx":"3","/var/www/html/multi-dnd/src/task.jsx":"4","/var/www/html/multi-dnd/src/initial-data-2.js":"5"},{"size":3464,"mtime":1611395120777,"results":"6","hashOfConfig":"7"},{"size":1199,"mtime":1611393699929,"results":"8","hashOfConfig":"7"},{"size":1531,"mtime":1611394703083,"results":"9","hashOfConfig":"7"},{"size":999,"mtime":1611159203867,"results":"10","hashOfConfig":"7"},{"size":886,"mtime":1611395291550,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"1abqk7h",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/var/www/html/multi-dnd/src/index.js",["24"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport initialData2 from './initial-data-2';\nimport Column from './column';\nimport styled from 'styled-components';\n\n\nconst Container = styled.div`\ndisplay: flex;\n`;\n\nclass App extends React.Component {\n  state = initialData2;\n\n  onDragStart = () => {\n    // document.body.style.color = 'green';\n    document.body.style.transition = 'background 200ms ease';\n\n  }\n\n\n  onDragUpdate = update => {\n    const { destination } = update;\n    const opacity = destination\n      ? destination.index / Object.keys(this.state.tasks).length : 0;\n    document.body.style.background = `rgba(153,141,217,${opacity})`;\n  }\n\n  onDragEnd = result => {\n    document.body.style.color = 'inherit';\n    document.body.style.backgroundColor = 'inherit'\n    // TODO reorder Our Column\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    if (type === 'column') {\n      const newColumnOrder = Array.from(this.state.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n\n      const newState = { ...this.state, columnOrder: newColumnOrder };\n\n      this.setState(newState);\n      return;\n\n\n    }\n\n\n\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    if (start === finish) {\n\n      const newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const newColumn = { ...start, taskIds: newTaskIds, };\n      const newState = {\n        ...this.state.columns,\n        columns: { ...this.state.columns, [newColumn.id]: newColumn },\n      }\n\n      this.setState(newState);\n      return;\n    }\n\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = { ...start, taskIds: startTaskIds };\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n    const newFinish = { ...finish, taskIds: finishTaskIds };\n\n\n    const newState = { ...this.state, columns: { ...this.state.columns, [newStart.id]: newStart, [newFinish.id]: newFinish } }\n\n\n    this.setState(newState);\n\n  };\n\n\n  render() {\n\n\n    return (\n      <DragDropContext onDragStart={this.onDragStart} onDragUpdate={this.onDragUpdate} onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"all-column\" direction=\"horizontal\" type=\"column\">\n          {provided => (\n            <Container {...provided.droppableProps} ref={provided.innerRef} >\n              {this.state.columnOrder.map((columnId, index) => {\n\n                const column = this.state.columns[columnId];\n                const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n                return <Column key={column.id} column={column} tasks={tasks} index={index}></Column>\n\n              })}\n              {provided.placeholder}\n            </Container>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nReactDOM.render(<React.StrictMode>  <App /></React.StrictMode>, document.getElementById('root')\n);\n\n",["25","26"],"/var/www/html/multi-dnd/src/initial-data.js",[],"/var/www/html/multi-dnd/src/column.jsx",[],"/var/www/html/multi-dnd/src/task.jsx",[],"/var/www/html/multi-dnd/src/initial-data-2.js",[],{"ruleId":"27","severity":1,"message":"28","line":5,"column":8,"nodeType":"29","messageId":"30","endLine":5,"endColumn":19},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},"no-unused-vars","'initialData' is defined but never used.","Identifier","unusedVar","no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-global-assign","no-unsafe-negation"]